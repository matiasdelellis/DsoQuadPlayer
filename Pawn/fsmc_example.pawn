#include <fpga>
#include <console>

#define FPGA_IMAGE "dso_quad.bin"

new recv_buffer[4096];
new fpga_config = 0x0001;

new escale_distance_svg[]    = [20, 20, 20, 20, 20, 20, 20, 20];
new escale_distance_time[]   = [20, 100, 400, 1, 2, 10, 20, 100];
static escale_units[]{}      = ["u", "u", "u", "m", "m", "m", "m", "m"];

static txt_samplerate[]{} =
	["Sampling at 1MHz",
	 "Sampling at 200kHz",
	 "Sampling at 50kHz",
	 "Sampling at 20kHz",
	 "Sampling at 10kHz",
	 "Sampling at 2kHz",
	 "Sampling at 1kHz",
	 "Sampling at 200Hz"];

const DataQuerry: {
	QUERRY_COUNT  = 0,
	QUERRY_RAW    = 1,
	QUERRY_PLUS   = 2,
	QUERRY_MINUS  = 3
}
new querry_hex[] = [0x0003, 0x0000, 0x0001, 0x0002];

const Prescale: {
	PRESCALE_1u   = 0,
	PRESCALE_5u   = 1,
	PRESCALE_20u  = 2,
	PRESCALE_50u  = 3,
	PRESCALE_100u = 4,
	PRESCALE_500u = 5,
	PRESCALE_1m   = 6,
	PRESCALE_5m   = 7
}

new Prescale: prescale_idx = PRESCALE_1u;

/*
 * Auxiliary functions to write an SVG file
 */

new AXE_X = 20;
new AXE_Y = 0;

svg_init(File: file)
{
	f_write(file, "<html><body><svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\r\n");
}

svg_close(File: file)
{
	f_write(file, "</svg></body></html>");

	AXE_X = 20;
	AXE_Y = 0;
}

svg_new_axe(File: file, const name{}, width)
{
	new scaler_x = AXE_X;
	new mark = 0;

	AXE_Y += 276;

	f_write(file, strjoin("\t<polyline points=\"", str(AXE_X), ",", str(AXE_Y), " ", str(AXE_X), ",", str(AXE_Y - 256), "\" style=\"fill:none;stroke:black;stroke-width:2\"/>\r\n"));
	f_write(file, strjoin("\t<polyline points=\"", str(AXE_X), ",", str(AXE_Y), " ", str(AXE_X + width), ",", str(AXE_Y), "\" style=\"fill:none;stroke:black;stroke-width:2\"/>\r\n"));

	while (scaler_x < (AXE_X + width)) {
		scaler_x += escale_distance_svg [prescale_idx];
		mark += escale_distance_time [prescale_idx];

		f_write(file, strjoin("\t<polyline points=\"", str(scaler_x), ",", str(AXE_Y - 4), " ", str(scaler_x), ",", str(AXE_Y + 4), "\" style=\"fill:none;stroke:black;stroke-width:2\"/> "));

		f_write(file, strjoin("<text x=\"", str(scaler_x), "\" y=\"", str(AXE_Y + 15), "\" "));
		f_write(file, strjoin("font-family=\"Verdana\" font-size=\"12\" style=\"text-anchor: middle\">"));
		f_write(file, strjoin(str(mark), escale_units[prescale_idx], "</text>\r\n"));

	}

	f_write(file, strjoin("\t<text x=\"", str(AXE_X + 5), "\" y=\"", str(AXE_Y - 5), "\" font-family=\"Verdana\" font-size=\"20\">", name, "</text>\r\n"));

	f_write(file, strjoin("\t<text x=\"", str(AXE_X + width/2), "\" y=\"", str(AXE_Y + 20)));
	f_write(file, "\" font-family=\"Verdana\" font-size=\"20\" style=\"text-anchor: middle\">");
	f_write(file, strjoin(txt_samplerate[prescale_idx], "</text>\r\n"));
}

svg_new_polyline(File: file)
{
	f_write(file, "\t<polyline points=\"");
}

svg_polyline_add_point(File: file, time, value)
{
	f_write(file, str(AXE_X + time));
	f_write(file, ",");
	f_write(file, str(AXE_Y - value));
	f_write(file, " ");
}

svg_close_polyline(File: file, const color{})
{
	f_write(file, strjoin("\" style=\"fill:none;stroke:", color, ";stroke-width:2\" />\r\n"));
}

/*
 * FPGA
 */

fpga_set_querry (DataQuerry: querry)
{
	fpga_config &= 0xFFFC;
	fpga_config |= querry_hex[querry];
}

fpga_debug_samplerate ()
{
	println (txt_samplerate[prescale_idx]);
}

fpga_set_prescaler ()
{
	fpga_config = fpga_config & 0x0003; //0000-0011

	if (prescale_idx == PRESCALE_5u) {
		fpga_config = fpga_config | 0x0004; //0000-0100
	}
	else if (prescale_idx == PRESCALE_20u) {
		fpga_config = fpga_config | 0x0008; //0000-1000
	}
	else if (prescale_idx == PRESCALE_50u) {
		fpga_config = fpga_config | 0x000C; //0000-1100
	}
	else if (prescale_idx == PRESCALE_100u) {
		fpga_config = fpga_config | 0x0010; //0001-0000
	}
	else if (prescale_idx == PRESCALE_500u) {
		fpga_config = fpga_config | 0x0014; //0001-0100
	}
	else if (prescale_idx == PRESCALE_1m) {
		fpga_config = fpga_config | 0x0018; //0001-1000
	}
	else if (prescale_idx == PRESCALE_5m) {
		fpga_config = fpga_config | 0x001C; //0001-1100
	}
}

fpga_write_config ()
{
	new buffer[1];

	fpga_set_prescaler ()

	buffer[0] = fpga_config;

	fpga_write(buffer);
}

fpga_reset()
{
	fpga_clear_pin (PB1); // Reset
	delay_ms (10);
	fpga_set_pin (PB1);   // Clean reset
}

fpga_clear_fifo()
{
	fpga_clear_pin (PB2);
	delay_ms (10);
	fpga_set_pin (PB2);
}

bool: fpga_initialize()
{
	while (!f_exists(FPGA_IMAGE)) {
		if (show_dialog("Please copy " ... FPGA_IMAGE ... " to the USB drive.", "OK", "", "", "Exit") == 3) {
			return false;
		}
	}

	if (!fpga_load(FPGA_IMAGE)) {
		show_msgbox("Failed to load " ... FPGA_IMAGE ... " to the FPGA!");
		return false;
	}

	// Configure FPGA clock at 72 MHz
	wavein_samplerate (72000000);

	fpga_config_outputs(PB0);
	fpga_config_outputs(PB1);
	fpga_config_outputs(PB2);

	fpga_reset();

	prescale_idx = PRESCALE_1u;
	fpga_set_querry (QUERRY_COUNT);

	fpga_write_config ();

	return true;
}

do_capture ()
{
	new i = 0;
	new filename{14} = "WAVE%03d.SVG";

	// First read the amount of available data
	fpga_set_querry (QUERRY_COUNT);
	fpga_write_config ();

	fpga_read (recv_buffer, 1);
	new count = recv_buffer[0];

	println(strjoin("Found ", str(count), " samples."));

	if (!count)
		return;

	if (count > 4096) {
		println("Soooo big..");
		return;
	}

	select_filename(filename);
	new File: file = f_open(filename, FA_WRITE | FA_CREATE_ALWAYS);

	// Get the data into our buffer
	fpga_set_querry (QUERRY_RAW);
	fpga_write_config ();

	fpga_read (recv_buffer, count);

	svg_init(file);

	svg_new_axe(file, "Channel A", count);
	svg_new_polyline(file);
	for (i = 0; i < count; i++)
		svg_polyline_add_point(file, i, (recv_buffer[i] & 0x00FF));
	svg_close_polyline(file, "blue");

	svg_new_axe(file, "Channel B", count);
	svg_new_polyline(file);
	for (i = 0; i < count; i++)
		svg_polyline_add_point(file, i, (recv_buffer[i] >> 8));
	svg_close_polyline(file, "red");

	svg_close(file);

	if (f_close(file))
		println(strjoin("Saved ", filename));
	else
		println("Writing SVG file failed.");

	fpga_clear_fifo();
}

main()
{
	new bool: fill = false;

	if (!fpga_initialize())
		return;

	config_chA(ADC_DC, ADC_500mV);
	config_chB(ADC_DC, ADC_500mV);
	waveout_digital(1000);

	draw_menubar("Fill", "Rst", "Save", "Exit");

	println("FPGA configured successfully.");
	println("Ready to capture channels at 72 MSps.");

	while (!get_keys(BUTTON4)) {
		if (held_keys(BUTTON1)) {
			if (!fill) {
				fpga_set_pin(PB0);
				fill = true;

				println("Getting samples on FPGA");
			}
		}
		else {
			if (fill) {
				fpga_clear_pin(PB0);
				fill = false;

				println("Sampling on FPGA completed");
			}
		}

		if (get_keys(BUTTON2)) {
			println("Resetting FPGA");
			fpga_reset();

			prescale_idx = PRESCALE_1u;
			fpga_write_config ();
			fpga_debug_samplerate ();
		}

		if (get_keys(BUTTON3)) {
			println ("Saving samples on SVG file");
			do_capture();
		}

		if (get_keys(SCROLL2_RIGHT)) {
			prescale_idx++;
			if (prescale_idx > PRESCALE_5m)
				prescale_idx = PRESCALE_1u;
			fpga_write_config ();
			fpga_debug_samplerate ();

			delay_ms(10);
		}
		else if (get_keys(SCROLL2_LEFT)) {
			prescale_idx--;
			if (prescale_idx < PRESCALE_1u)
				prescale_idx = PRESCALE_5m;
			fpga_write_config ();
			fpga_debug_samplerate ();

			delay_ms(10);
		}
	}
}

new const program_icon[] = [
    0b0000000000000000000000000000000,
    0b0011111101111100011110001111000,
    0b0011000001100110110011011001100,
    0b0011000001100110110000011001100,
    0b0011111001111100111111011111100,
    0b0011000001100000110011011001100,
    0b0011000001100000110011011001100,
    0b0011000001100000011110011001100,
    0b0000000000000000000000000000000,
    0b0000000000000000000000000000000,

    0b0000000000000000000000000000000,
    0b0001111110000111111000011111100,
    0b0001000010000100001000010000100,
    0b0001000010000100001000010000100,
    0b0001000010000100001000010000100,
    0b0001000010000100001000010000100,
    0b1111000011111100001111110000111,
    0b0000000000000000000000000000000,

    0b0000000000000000000000000000000,
    0b0001111110111111001111001111110,
    0b0000011000110000011001100011000,
    0b0000011000110000011000000011000,
    0b0000011000111110001111000011000,
    0b0000011000110000000001100011000,
    0b0000011000110000011001100011000,
    0b0000011000111111001111000011000,
    0b0000000000000000000000000000000,
    0b0000000000000000000000000000000,
];

new const program_name{} = "Fsmc Example";

#include <metadata>

