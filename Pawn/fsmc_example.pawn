#include <fpga>
#include <console>

#define FPGA_IMAGE "dso_quad.bin"

fpga_set_config(value)
{
	new buffer[1];
	buffer[0] = value;

	fpga_write(buffer);
}

fpga_reset()
{
	fpga_config_outputs(PB1);
	fpga_clear_pin (PB1); // Reset
	delay_ms (10);
	fpga_set_pin (PB1);   // Clean reset
}

bool: fpga_initialize()
{
	while (!f_exists(FPGA_IMAGE)) {
		if (show_dialog("Please copy " ... FPGA_IMAGE ... " to the USB drive.", "OK", "", "", "Exit") == 3) {
			return false;
		}
	}

	if (!fpga_load(FPGA_IMAGE)) {
		show_msgbox("Failed to load " ... FPGA_IMAGE ... " to the FPGA!");
		return false;
	}

	// Configure FPGA clock at 72 MHz
	wavein_samplerate (72000000);

	fpga_config_outputs(PB0);
	fpga_config_outputs(PB1);

	fpga_reset();

	return true;
}

new recv_buffer[4096];

do_capture ()
{
	// First read the amount of available data
	fpga_set_config(0x0001);
	fpga_read (recv_buffer, 1);
	new count = recv_buffer[0];

	print("Count: ");
	println(str(count));

	if (!count)
		return;

	if (count > 4096) {
		println("Soooo big..");
		return;
	}

	// Get the data into our buffer
	fpga_set_config (0x0000);
	fpga_read (recv_buffer, count);

	print("# ");
	for (new i = 0; i < count; i++) {
		print(hex(recv_buffer[i]));
		print(" ");
	}
	print("\n");
}

main()
{
	new bool: fill = false;

	if (!fpga_initialize())
		return;

	draw_menubar("FILL", "RST", "GET", "Exit");

	println("FPGA configured successfully.");
	println("Ready to capture channels at 72 MSps.");

	while (!get_keys(BUTTON4)) {
		if (held_keys(BUTTON1)) {
			if (!fill) {
				fpga_set_pin(PB0);
				fill = true;
			}
			println("Filling");
		}
		else {
			if (fill) {
				fpga_clear_pin(PB0);
				fill = false;

				println("Stop Filling");
			}
		}

		if (get_keys(BUTTON2)) {
			fpga_reset()
			println("Reset");
		}

		if (get_keys(BUTTON3)) {
			println ("Get");
			do_capture();
		}
	}
}

new const program_icon[] = [
    0b0000000000000000000000000000000,
    0b0011111101111100011110001111000,
    0b0011000001100110110011011001100,
    0b0011000001100110110000011001100,
    0b0011111001111100111111011111100,
    0b0011000001100000110011011001100,
    0b0011000001100000110011011001100,
    0b0011000001100000011110011001100,
    0b0000000000000000000000000000000,
    0b0000000000000000000000000000000,

    0b0000000000000000000000000000000,
    0b0001111110000111111000011111100,
    0b0001000010000100001000010000100,
    0b0001000010000100001000010000100,
    0b0001000010000100001000010000100,
    0b0001000010000100001000010000100,
    0b1111000011111100001111110000111,
    0b0000000000000000000000000000000,

    0b0000000000000000000000000000000,
    0b0001111110111111001111001111110,
    0b0000011000110000011001100011000,
    0b0000011000110000011000000011000,
    0b0000011000111110001111000011000,
    0b0000011000110000000001100011000,
    0b0000011000110000011001100011000,
    0b0000011000111111001111000011000,
    0b0000000000000000000000000000000,
    0b0000000000000000000000000000000,
];

new const program_name{} = "Fsmc Example";

#include <metadata>

